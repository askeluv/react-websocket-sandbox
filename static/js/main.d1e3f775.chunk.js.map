{"version":3,"sources":["components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Feed","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","trades","t","price","parseFloat","toString","amount","direction","type","concat","data","map","_trade2text","json","JSON","parse","undefined","event","trades2text","setState","message","refWebSocket","sendMessage","stringify","pair","subscription","name","_this2","react_default","a","createElement","className","key","build_default","url","onMessage","handleData","bind","onOpen","subscribe","ref","Websocket","React","Component","App","components_Feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAiEeA,cA5Df,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,CAAC,2BAHMR,2EAOPS,GACV,IAAMC,EAAQC,WAAWF,EAAE,IAAIG,WAAYC,EAASF,WAAWF,EAAE,IAAIG,WAC/DE,EAAqB,MAD6DL,EAAE,GACzD,SAAW,OACtCM,EAAiB,MAF+EN,EAAE,GAE3E,SAAW,QACxC,SAAAO,OAAUH,EAAV,SAAAG,OAAwBD,EAAxB,KAAAC,OAAgCF,EAAhC,SAAAE,OAAiDN,uCAGvCO,GAEV,OADeA,EAAK,GACNC,IAAIf,KAAKgB,gDAGdF,GACT,IAAIG,EAAOC,KAAKC,MAAML,GACtB,QAAmBM,IAAfH,EAAKI,MAAqB,CAC5B,IAAMhB,EAASL,KAAKsB,YAAYL,GAChCjB,KAAKuB,SAAS,CAAElB,gDAIRmB,GACVxB,KAAKyB,aAAaC,YAAYF,uCAI9BxB,KAAK0B,YAAYR,KAAKS,UACpB,CACEN,MAAS,YACTO,KAAQ,CACN,WAEFC,aAAgB,CACdC,KAAQ,6CAIP,IAAAC,EAAA/B,KACP,OACEgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAKlC,KAAKI,MAAMC,OAAOU,IAAI,SAACS,GAAD,OAAaQ,EAAAC,EAAAC,cAAA,MAAIE,IAAKZ,GAAUA,MAE3DQ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWK,IAAI,sBACXC,UAAWvC,KAAKwC,WAAWC,KAAKzC,MAChC0C,OAAQ1C,KAAK2C,UAAUF,KAAKzC,MAC5B4C,IAAK,SAAAC,GACHd,EAAKN,aAAeoB,aAtDbC,IAAMC,WCeVC,mLAXX,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAACe,EAAD,cARUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1e3f775.chunk.js","sourcesContent":["import React from 'react';\nimport Websocket from 'react-websocket';\n\nclass Feed extends React.Component {\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    trades: ['Waiting for trades ...']\n  };\n}\n\n_trade2text(t) {\n  const price = parseFloat(t[0]).toString(), amount = parseFloat(t[1]).toString(), _dir = t[3], _type = t[4]\n  const direction = _dir === 'b' ? 'bought' : 'sold';\n  const type = _type === 'm' ? 'market' : 'limit';\n  return `${amount} BTC ${type}-${direction} at $${price}`\n}\n\ntrades2text(data) {\n  const trades = data[1]\n  return trades.map(this._trade2text)\n}\n\nhandleData(data) {\n  let json = JSON.parse(data);\n  if (json.event === undefined) {\n    const trades = this.trades2text(json);\n    this.setState({ trades });\n  }\n}\n\nsendMessage(message){\n  this.refWebSocket.sendMessage(message);\n}\n\nsubscribe() {\n  this.sendMessage(JSON.stringify(\n    {\n      \"event\": \"subscribe\",\n      \"pair\": [\n        \"XBT/USD\"\n      ],\n      \"subscription\": {\n        \"name\": \"trade\"\n      }\n    }))}\n\nrender() {\n  return (\n    <div className=\"App-feed\">\n      <ul>{this.state.trades.map((message) => <li key={message}>{message}</li>)}</ul>\n\n      <Websocket url='wss://ws.kraken.com'\n          onMessage={this.handleData.bind(this)}\n          onOpen={this.subscribe.bind(this)}\n          ref={Websocket => {\n            this.refWebSocket = Websocket;\n          }}\n          />\n    </div>\n  );\n}\n}\n\nexport default Feed;","import React, { Component } from 'react';\nimport './App.css';\nimport Feed from './components/Feed'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Kraken Trade Feed</p>\n        </header>\n        <Feed />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}